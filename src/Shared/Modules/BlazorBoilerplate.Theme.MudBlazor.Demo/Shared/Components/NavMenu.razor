@using Microsoft.AspNetCore.Components;
@inject NavigationManager navigationManager
@inject IStringLocalizer<Global> L
@implements IDynamicComponent

<MudNavLink Href="@navigationManager.ToAbsoluteUri(" ").AbsoluteUri" Match="NavLinkMatch.All" Icon="@Icons.Filled.Home">
    <span class="miniHover">@L["AppNavHome"]</span>
</MudNavLink>

<MudNavLink Href="@navigationManager.ToAbsoluteUri("todo_list").AbsoluteUri" Icon="@Icons.Filled.ListAlt">
    <span class="miniHover">@L["TodoNav"]</span>
</MudNavLink>

<MudNavGroup Title="@L["AppNavFeatures"]" Icon="@Icons.Filled.Stars">
    <MudNavLink Href="@navigationManager.ToAbsoluteUri("drag_and_drop").AbsoluteUri" Icon="@Icons.Filled.TouchApp">
        <span class="miniHover">@L["AppNavDragAndDrop"]</span>
    </MudNavLink>
</MudNavGroup>

<MudNavLink Href="@navigationManager.ToAbsoluteUri("dashboard").AbsoluteUri" Disabled="@(!IsLoggedIn)" Icon="@Icons.Filled.BarChart">
    <span class="miniHover">@L["Dashboard"]</span>
</MudNavLink>

<MudNavGroup Title="@L["AppNavEmail"]" Disabled="@(!IsLoggedIn)" Icon="@Icons.Filled.MailOutline">
    <MudNavLink Href="@navigationManager.ToAbsoluteUri("email_view").AbsoluteUri" Disabled="@(!IsLoggedIn)" Icon="@Icons.Filled.Inbox">
        <span class="miniHover">@L["AppNavReadEmail"]</span>
    </MudNavLink>
    <MudNavLink Href="@navigationManager.ToAbsoluteUri("email").AbsoluteUri" Disabled="@(!IsLoggedIn)" Icon="@Icons.Filled.Send">
        <span class="miniHover">@L["AppNavSendEmail"]</span>
    </MudNavLink>
</MudNavGroup>

<MudNavLink Href="@navigationManager.ToAbsoluteUri("forum").AbsoluteUri" Disabled="@(!IsLoggedIn)" Icon="@Icons.Filled.Forum">
    <span class="miniHover">@L["AppNavForum"]</span>
</MudNavLink>

<MudNavLink Href="@navigationManager.ToAbsoluteUri("sponsors").AbsoluteUri" Icon="@Icons.Filled.AttachMoney">
    <span class="miniHover">@L["AppNavSponsors"]</span>
</MudNavLink>

@code {

    public int Order { get => 1; }
    public string IntoComponent { get => "NavMenu"; }

    public bool IsLoggedIn = false;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        IsLoggedIn = false;
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            IsLoggedIn = true;
        }
    }
}
