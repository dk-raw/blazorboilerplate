@page "/todo_list"
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IStringLocalizer<Global> L

<TopSection>
    <Breadcrumbs>
        <Breadcrumb Title="Todo List" />
    </Breadcrumbs>
</TopSection>

<h1>Todo List - CRUD</h1>
<p>
    This Todo List demonstrates fetching data from the server and CRUD for Blazor with <a href="http://breeze.github.io" target="_blank">Breeze</a> to make API design easy.
    <br />Check out the <a href="https://github.com/enkodellc/blazorboilerplate" target="_blank">repository to view the source.</a>
    <br />If you find this helpful please contribute or <DonateButton /> to support further development.
    <br /><b>Delete is Protected to Admin users only</b>.
</p>


<EditForm Model="filter">
    <div class="input-group input-daterange d-flex align-items-center">
        <MudDatePicker Disabled="@busy" @bind-Date="filter.From" class="form-control" placeholder="Da" />
        <MudDatePicker Disabled="@busy" @bind-Date="filter.To" class="form-control" placeholder="A" />
    </div>
</EditForm>
<MudGrid>
    <MudItem xs="6" sm="3">
        <div class="form-group">
            <label for="Creators">Creators</label>
            <MudSelect Id="Creators" Disabled="@busy" @bind-Value="@filter.CreatedById" FullWidth="true">
                @foreach (var user in Creators)
                {
                    <MudSelectItem Value="@user.Id">@user.DisplayValue</MudSelectItem>
                }
            </MudSelect>
        </div>
    </MudItem>
    <MudItem xs="6" sm="3">
        <div class="form-group">
            <label for="Editors">Editors</label>
            <MudSelect Id="Editors" Disabled="@busy" @bind-Value="@filter.ModifiedById" FullWidth="true">
                @foreach (var user in Editors)
                {
                    <MudSelectItem Value="@user.Id">@user.DisplayValue</MudSelectItem>
                }
            </MudSelect>
        </div>
    </MudItem>
    <MudItem xs="6" sm="3">
        <div class="form-group">
            <MudCheckBox @bind-Checked="@filter.IsCompleted">Is Completed</MudCheckBox>
            <MudButton OnClick="@(_ =>
                                 {
                                     filter.IsCompleted = null;
                                 })">Clear</MudButton>
        </div>
    </MudItem>
    <MudItem xs="6" sm="3">

    </MudItem>
</MudGrid>

<div>Item Count: @itemCount</div>

<MudSimpleTable FixedHeader="true" Dense="true" Bordered="true" Striped="true" Style="height:342px;overflow-y:auto;overflow-x:hidden">
    <thead>
        <tr>
            <th>
                <MudButton Icon="@Icons.Filled.PlaylistAdd" Label="New Todo" OnClick="@((e) => OpenDialog())" Raised="true"></MudButton>
            </th>
            <th>Todo</th>
            <th>Completed</th>
            <th>Created on</th>
            <th>Created by</th>
            <th>Modified by</th>
        </tr>
    </thead>
    <tbody>
        <Virtualize @ref="asyncVirtualize" Context="item" ItemsProvider="LoadToDos" ItemSize="61" OverscanCount="20">
            <ItemContent>
                <tr @key="item.Id">
                    <td><MudIconButton Icon="@Icons.Filled.Delete" OnClick="@(() => OpenDeleteDialog(item))"></MudIconButton></td>
                    <td>@item.Title</td>
                    <td><MudCheckBox class="filled-in chk-col-blue" Checked="@item.IsCompleted" CheckedChanged="@((bool i) => Update(item))"></MudCheckBox></td>
                    <td>@item.CreatedOn</td>
                    <td>@item.CreatedBy?.UserName</td>
                    <td>@item.ModifiedBy?.UserName</td>
                </tr>
            </ItemContent>
            <Placeholder>
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            </Placeholder>
        </Virtualize>
    </tbody>
</MudSimpleTable>

@if (currentTodo != null)
{<MudDialog @bind-IsVisible="@dialogIsOpen">
        <TitleContent>Create Todo</TitleContent>
        <DialogContent>
            <EditForm id="newTodoForm" Model="@currentTodo" OnValidSubmit="@NewEntity">
                <FluentValidationValidator />
                <ValidationSummary />
                <fieldset>
                    <div class="form-group">
                        <MudTextField @bind-Value="@currentTodo.Title" Label="Title" AdornmentIcon="@Icons.Filled.Title" Adornment="Adornment.End" FullWidth="true" Required="true"></MudTextField>
                    </div>
                    <div class="form-group">
                        <MudCheckBox @bind-Checked="@currentTodo.IsCompleted" Label="Completed"></MudCheckBox>
                    </div>
                </fieldset>
            </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@(e => { dialogIsOpen = false; })">@L["Cancel"]</MudButton>
            <MudButton Type="submit" form="newTodoForm" Raised="true">Create Todo</MudButton>
        </DialogActions>
    </MudDialog>

    <MudDialog @bind-IsVisible="@deleteDialogOpen" Style="z-index:100">
        <TitleContent><MudIcon Icon="@Icons.Filled.Warning"></MudIcon> @L["Confirm Delete"]</TitleContent>
        <DialogContent>
            @L["Are you sure you want to delete {0}?", currentTodo.Title]
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@(e => { deleteDialogOpen = false; })">@L["Cancel"]</MudButton>
            <MudButton OnClick="@Delete">@L["Delete"]</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    private ToDoFilter filter = new();
    private Virtualize<Todo> asyncVirtualize;

    private List<SelectItem<Guid?>> Creators = new();
    private List<SelectItem<Guid?>> Editors = new();

    private bool busy;
    private bool deleteDialogOpen = false;
    private bool dialogIsOpen = false;

    private int itemCount = 0;

    private Todo currentTodo;

    protected override async Task OnInitializedAsync()
    {
        await LoadFilters();

        filter.PropertyChanged += FilterPropertyChanged;
    }

    private async void FilterPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        busy = true;

        await LoadFilters(e.PropertyName);

        apiClient.ClearEntitiesCache();
        await asyncVirtualize.RefreshDataAsync();

        busy = false;

        StateHasChanged();
    }

    private async Task LoadFilters(string propertyName = null)
    {
        var tasks = new Dictionary<string, Task>();

        if (propertyName != nameof(filter.CreatedById))
            tasks.Add("GetTodoCreators", apiClient.GetTodoCreators(filter));

        if (propertyName != nameof(filter.ModifiedById))
            tasks.Add("GetTodoEditors", apiClient.GetTodoEditors(filter));

        await Task.WhenAll(tasks.Values.ToArray());

        foreach (var task in tasks)
        {
            if (task.Key == "GetTodoCreators")
            {
                var t = (Task<QueryResult<ApplicationUser>>)task.Value;

                if (!t.IsFaulted)
                {
                    Creators = t.Result.Select(i => new SelectItem<Guid?> { Id = i.Id, DisplayValue = i.UserName }).ToList();

                    Creators.Insert(0, new SelectItem<Guid?> { Id = null, DisplayValue = "-" });
                }
                else
                    viewNotifier.Show(t.Exception.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
            }
            else if (task.Key == "GetTodoEditors")
            {
                var t = (Task<QueryResult<ApplicationUser>>)task.Value;

                if (!t.IsFaulted)
                {
                    Editors = t.Result.Select(i => new SelectItem<Guid?> { Id = i.Id, DisplayValue = i.UserName }).ToList();

                    Editors.Insert(0, new SelectItem<Guid?> { Id = null, DisplayValue = "-" });
                }
                else
                    viewNotifier.Show(t.Exception.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
    }

    private async ValueTask<ItemsProviderResult<Todo>> LoadToDos(ItemsProviderRequest request)
    {
        var items = await apiClient.GetToDos(filter,
            request.Count,
            request.StartIndex);

        itemCount = (int)items.InlineCount;

        if (request.StartIndex == 0)
            StateHasChanged();

        return new ItemsProviderResult<Todo>(items, itemCount);
    }

    public async void Update(Todo todo)
    {
        try
        {
            todo.IsCompleted = !todo.IsCompleted;

            await apiClient.SaveChanges();

            viewNotifier.Show($"{todo.Title} updated", ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    public async Task Delete()
    {
        try
        {
            apiClient.RemoveEntity(currentTodo);
            await apiClient.SaveChanges();

            apiClient.ClearEntitiesCache();
            await asyncVirtualize.RefreshDataAsync();

            viewNotifier.Show($"{currentTodo.Title} deleted", ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            apiClient.CancelChanges();
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }

        currentTodo = new Todo();

        deleteDialogOpen = false;
    }

    public void OpenDialog()
    {
        currentTodo = new Todo();
        dialogIsOpen = true;
    }

    public void OpenDeleteDialog(Todo todo)
    {
        currentTodo = todo;
        deleteDialogOpen = true;
    }

    public async Task NewEntity()
    {
        dialogIsOpen = false;

        try
        {
            apiClient.AddEntity(currentTodo);

            await apiClient.SaveChanges();

            apiClient.ClearEntitiesCache();
            await asyncVirtualize.RefreshDataAsync();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            apiClient.CancelChanges();
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
